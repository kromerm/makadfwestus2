{
	"name": "sampling",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "loans",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          member_id as integer,",
				"          loan_amnt as double,",
				"          funded_amnt as double,",
				"          funded_amnt_inv as double,",
				"          term as string,",
				"          int_rate as double,",
				"          installment as double,",
				"          grade as string,",
				"          sub_grade as string,",
				"          emp_title as string,",
				"          emp_length as string,",
				"          home_ownership as string,",
				"          annual_inc as double,",
				"          verification_status as string,",
				"          issue_d as string,",
				"          loan_status as string,",
				"          pymnt_plan as boolean,",
				"          url as string,",
				"          desc as string,",
				"          purpose as string,",
				"          title as string,",
				"          zip_code as string,",
				"          addr_state as string,",
				"          dti as string,",
				"          delinq_2yrs as string,",
				"          earliest_cr_line as string,",
				"          inq_last_6mths as string,",
				"          mths_since_last_delinq as string,",
				"          mths_since_last_record as double,",
				"          open_acc as string,",
				"          pub_rec as double,",
				"          revol_bal as double,",
				"          revol_util as double,",
				"          total_acc as double,",
				"          initial_list_status as string,",
				"          out_prncp as double,",
				"          out_prncp_inv as string,",
				"          total_pymnt as double,",
				"          total_pymnt_inv as string,",
				"          total_rec_prncp as double,",
				"          total_rec_int as double,",
				"          total_rec_late_fee as double,",
				"          recoveries as double,",
				"          collection_recovery_fee as double,",
				"          last_pymnt_d as string,",
				"          last_pymnt_amnt as double,",
				"          next_pymnt_d as string,",
				"          last_credit_pull_d as string,",
				"          collections_12_mths_ex_med as string,",
				"          mths_since_last_major_derog as string,",
				"          policy_code as string,",
				"          application_type as string,",
				"          annual_inc_joint as double,",
				"          dti_joint as string,",
				"          verification_status_joint as double,",
				"          acc_now_delinq as string,",
				"          tot_coll_amt as string,",
				"          tot_cur_bal as double,",
				"          open_acc_6m as string,",
				"          open_il_6m as double,",
				"          open_il_12m as string,",
				"          open_il_24m as string,",
				"          mths_since_rcnt_il as string,",
				"          total_bal_il as string,",
				"          il_util as string,",
				"          open_rv_12m as string,",
				"          open_rv_24m as string,",
				"          max_bal_bc as string,",
				"          all_util as string,",
				"          total_rev_hi_lim as string,",
				"          inq_fi as string,",
				"          total_cu_tl as string,",
				"          inq_last_12m as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 filter(id == 1077501 ||\r",
				"id == 1077430 ||\r",
				"id == 1077175 ||\r",
				"id == 1076863 ||\r",
				"id == 1075358 ||\r",
				"id == 1075269 ||\r",
				"id == 1069639 ||\r",
				"id == 1072053 ||\r",
				"id == 1071795 ||\r",
				"id == 1071570 ||\r",
				"id == 1070078 ||\r",
				"id == 1069908 ||\r",
				"id == 1064687 ||\r",
				"id == 1069866 ||\r",
				"id == 1069057 ||\r",
				"id == 1069759 ||\r",
				"id == 1065775 ||\r",
				"id == 1069971 ||\r",
				"id == 1062474) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     container: 'mycontainer',",
				"     folderPath: 'SampleData/loans',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'mycontainer',",
				"     folderPath: 'SampleData/loans',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}