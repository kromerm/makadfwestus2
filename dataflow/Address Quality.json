{
	"name": "Address Quality",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Address",
						"type": "DatasetReference"
					},
					"name": "Address1"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DataQualityRules"
				},
				{
					"name": "MetadataChecker"
				},
				{
					"name": "FailedMetadata"
				},
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          AddressID as integer,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          StateProvince as string,",
				"          CountryRegion as string,",
				"          PostalCode as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Address1",
				"MetadataChecker@Pass assert(expectTrue(CountryRegion == 'United States', false, 'assertUsOnly', null, CountryRegion + ' is not valid'),",
				"     expectUnique(AddressID, false, 'addressIdUnique', null, \"ID of {AddressID} is not unique\")) ~> DataQualityRules",
				"cast1 split(iif(!in(columnNames(),'AddressID'),false(),\r",
				"    iif(!in(columnNames(),'AddressLine1'),false(),\r",
				"        iif(!in(columnNames(),'City'),false(),\r",
				"            iif(!in(columnNames(),'StateProvince'),false(),\r",
				"                iif(!in(columnNames(),'CountryRegion'),false(),\r",
				"                    iif(!in(columnNames(),'PostalCode'),false(),true())))))),",
				"     disjoint: false) ~> MetadataChecker@(Pass, Fail)",
				"MetadataChecker@Fail assert(expectTrue(false(), false, 'failedMetadata', null, 'Not all columns present'),",
				"     abort: true) ~> FailedMetadata",
				"Address1 cast(output(",
				"          AddressID as ({} as string)",
				"     ),",
				"     errors: true) ~> cast1",
				"DataQualityRules sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}