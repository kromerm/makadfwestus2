{
	"name": "dataflow18",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "loans",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "flowlet1",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          member_id as string,",
				"          loan_amnt as string,",
				"          funded_amnt as string,",
				"          funded_amnt_inv as string,",
				"          term as string,",
				"          int_rate as string,",
				"          installment as string,",
				"          grade as string,",
				"          sub_grade as string,",
				"          emp_title as string,",
				"          emp_length as string,",
				"          home_ownership as string,",
				"          annual_inc as string,",
				"          verification_status as string,",
				"          issue_d as string,",
				"          loan_status as string,",
				"          pymnt_plan as string,",
				"          url as string,",
				"          desc as string,",
				"          purpose as string,",
				"          title as string,",
				"          zip_code as string,",
				"          addr_state as string,",
				"          dti as string,",
				"          delinq_2yrs as string,",
				"          earliest_cr_line as string,",
				"          inq_last_6mths as string,",
				"          mths_since_last_delinq as string,",
				"          mths_since_last_record as string,",
				"          open_acc as string,",
				"          pub_rec as string,",
				"          revol_bal as string,",
				"          revol_util as string,",
				"          total_acc as string,",
				"          initial_list_status as string,",
				"          out_prncp as string,",
				"          out_prncp_inv as string,",
				"          total_pymnt as string,",
				"          total_pymnt_inv as string,",
				"          total_rec_prncp as string,",
				"          total_rec_int as string,",
				"          total_rec_late_fee as string,",
				"          recoveries as string,",
				"          collection_recovery_fee as string,",
				"          last_pymnt_d as string,",
				"          last_pymnt_amnt as string,",
				"          next_pymnt_d as string,",
				"          last_credit_pull_d as string,",
				"          collections_12_mths_ex_med as string,",
				"          mths_since_last_major_derog as string,",
				"          policy_code as string,",
				"          application_type as string,",
				"          annual_inc_joint as string,",
				"          dti_joint as string,",
				"          verification_status_joint as string,",
				"          acc_now_delinq as string,",
				"          tot_coll_amt as string,",
				"          tot_cur_bal as string,",
				"          open_acc_6m as string,",
				"          open_il_6m as string,",
				"          open_il_12m as string,",
				"          open_il_24m as string,",
				"          mths_since_rcnt_il as string,",
				"          total_bal_il as string,",
				"          il_util as string,",
				"          open_rv_12m as string,",
				"          open_rv_24m as string,",
				"          max_bal_bc as string,",
				"          all_util as string,",
				"          total_rev_hi_lim as string,",
				"          inq_fi as string,",
				"          total_cu_tl as string,",
				"          inq_last_12m as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"derivedColumn1 compose(mapColumn(",
				"          abc = cost",
				"     ),",
				"     composition: 'flowlet1') ~> flowlet1@(output1)",
				"source1 derive(cost = toInteger(round(toInteger(funded_amnt),1))) ~> derivedColumn1",
				"derivedColumn1, flowlet1@output1 join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          abc,",
				"          member_id,",
				"          loan_amnt,",
				"          funded_amnt,",
				"          funded_amnt_inv,",
				"          term,",
				"          int_rate,",
				"          installment,",
				"          grade,",
				"          sub_grade,",
				"          emp_title,",
				"          emp_length,",
				"          home_ownership,",
				"          annual_inc,",
				"          verification_status,",
				"          issue_d,",
				"          loan_status,",
				"          pymnt_plan,",
				"          url,",
				"          desc,",
				"          purpose,",
				"          title,",
				"          zip_code,",
				"          addr_state,",
				"          dti,",
				"          delinq_2yrs,",
				"          earliest_cr_line,",
				"          inq_last_6mths,",
				"          mths_since_last_delinq,",
				"          mths_since_last_record,",
				"          open_acc,",
				"          pub_rec,",
				"          revol_bal,",
				"          revol_util,",
				"          total_acc,",
				"          initial_list_status,",
				"          out_prncp,",
				"          out_prncp_inv,",
				"          total_pymnt,",
				"          total_pymnt_inv,",
				"          total_rec_prncp,",
				"          total_rec_int,",
				"          total_rec_late_fee,",
				"          recoveries,",
				"          collection_recovery_fee,",
				"          last_pymnt_d,",
				"          last_pymnt_amnt,",
				"          next_pymnt_d,",
				"          last_credit_pull_d,",
				"          collections_12_mths_ex_med,",
				"          mths_since_last_major_derog,",
				"          policy_code,",
				"          application_type,",
				"          annual_inc_joint,",
				"          dti_joint,",
				"          verification_status_joint,",
				"          acc_now_delinq,",
				"          tot_coll_amt,",
				"          tot_cur_bal,",
				"          open_acc_6m,",
				"          open_il_6m,",
				"          open_il_12m,",
				"          open_il_24m,",
				"          mths_since_rcnt_il,",
				"          total_bal_il,",
				"          il_util,",
				"          open_rv_12m,",
				"          open_rv_24m,",
				"          max_bal_bc,",
				"          all_util,",
				"          total_rev_hi_lim,",
				"          inq_fi,",
				"          total_cu_tl,",
				"          inq_last_12m,",
				"          cost,",
				"          abc",
				"     )) ~> sink1"
			]
		}
	}
}