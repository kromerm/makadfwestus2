{
	"name": "dataflow16",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesD2",
						"type": "DatasetReference"
					},
					"name": "EntitySource"
				},
				{
					"dataset": {
						"referenceName": "MoviesD2",
						"type": "DatasetReference"
					},
					"name": "EntitySource1"
				},
				{
					"dataset": {
						"referenceName": "MoviesD2",
						"type": "DatasetReference"
					},
					"name": "AuditSource"
				}
			],
			"sinks": [
				{
					"name": "CachedSinkHash"
				},
				{
					"dataset": {
						"referenceName": "SQLMovies",
						"type": "DatasetReference"
					},
					"name": "AuditSink"
				}
			],
			"transformations": [
				{
					"name": "NewRecords"
				},
				{
					"name": "InsertNewRows"
				},
				{
					"name": "SelectedCols"
				},
				{
					"name": "GenerateHashofKeys"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     location as string ('dataverse-devictbecour-unqbbababe295cd45618c2d190f5ef39'),",
				"     entity as string ('incident'),",
				"     BusinessKeys as string[] (['Id','versionnumber','brf_courttypename','brf_casetypename','brf_casenumber'])",
				"}",
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          RottenTomato as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EntitySource",
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          RottenTomato as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EntitySource1",
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          RottenTomato as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AuditSource",
				"AuditSource exists(array(byNames($BusinessKeys), 'EntitySource') == array(byNames($BusinessKeys), 'AuditSource'),",
				"     negate:true,",
				"     broadcast: 'left')~> NewRecords",
				"NewRecords alterRow(insertIf(true())) ~> InsertNewRows",
				"EntitySource1 select(mapColumn(",
				"          each(match(in($BusinessKeys,name)))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectedCols",
				"SelectedCols derive(hash = sha2Binary(512, concat('|', coalesce(toString(columns()), '|'), '|'))) ~> GenerateHashofKeys",
				"EntitySource derive(test = CachedSinkHash#lookup($BusinessKeys),",
				"          test2 = CachedSinkHash#lookup($BusinessKeys)) ~> derivedColumn1",
				"GenerateHashofKeys sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 0) ~> CachedSinkHash",
				"InsertNewRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movie as integer,",
				"          title as string,",
				"          genres as string,",
				"          year as integer,",
				"          Rating as integer,",
				"          RottenTomato as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AuditSink"
			]
		}
	}
}