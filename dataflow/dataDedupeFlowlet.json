{
	"name": "dataDedupeFlowlet",
	"properties": {
		"type": "Flowlet",
		"typeProperties": {
			"sources": [],
			"sinks": [],
			"transformations": [
				{
					"name": "FuzzyMatch"
				},
				{
					"name": "groupSoundex"
				},
				{
					"name": "Orig1"
				},
				{
					"name": "soundexJoin"
				},
				{
					"name": "soundexBranch"
				},
				{
					"name": "groupPhone"
				},
				{
					"name": "phoneBranch"
				},
				{
					"name": "phoneJoin"
				},
				{
					"name": "groupZip"
				},
				{
					"name": "zipBranch"
				},
				{
					"name": "zipJoin"
				},
				{
					"name": "setConstants"
				},
				{
					"name": "matchScore"
				},
				{
					"name": "finalResult"
				},
				{
					"name": "MapNames"
				},
				{
					"name": "CreateFullName"
				},
				{
					"name": "CheckForDupes"
				},
				{
					"name": "inputName"
				},
				{
					"name": "outputDupes"
				},
				{
					"name": "outputNoDupes"
				}
			],
			"scriptLines": [
				"input(output(",
				"          {Emp ID} as string,",
				"          {Name Prefix} as string,",
				"          {First Name} as string,",
				"          {Middle Initial} as string,",
				"          {Last Name} as string,",
				"          Gender as string,",
				"          {E Mail} as string,",
				"          {Father's Name} as string,",
				"          {Mother's Name} as string,",
				"          {Mother's Maiden Name} as string,",
				"          {Date of Birth} as string,",
				"          {Time of Birth} as string,",
				"          {Age in Yrs.} as double '##.##',",
				"          {Weight in Kgs.} as string,",
				"          {Date of Joining} as string,",
				"          {Quarter of Joining} as string,",
				"          {Half of Joining} as string,",
				"          {Year of Joining} as string,",
				"          {Month of Joining} as string,",
				"          {Month Name of Joining} as string,",
				"          {Short Month} as string,",
				"          {Day of Joining} as string,",
				"          {DOW of Joining} as string,",
				"          {Short DOW} as string,",
				"          {Age in Company (Years)} as string,",
				"          Salary as integer,",
				"          {Last % Hike} as string,",
				"          SSN as string,",
				"          {Phone No. } as string,",
				"          {Place Name} as string,",
				"          County as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as string,",
				"          Region as string,",
				"          {User Name} as string,",
				"          Password as string",
				"     ),",
				"     order: 0) ~> inputName",
				"MapNames derive(SoundexValue = soundex(fullname)) ~> FuzzyMatch",
				"Orig1 aggregate(groupBy(SoundexValue),",
				"     soundexmatch = sum(1)) ~> groupSoundex",
				"FuzzyMatch select(mapColumn(",
				"          acctnum,",
				"          fullname,",
				"          phone,",
				"          zip,",
				"          SoundexValue",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> Orig1",
				"groupSoundex, soundexBranch join(groupSoundex@SoundexValue == soundexBranch@SoundexValue,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> soundexJoin",
				"FuzzyMatch select(mapColumn(",
				"          acctnum,",
				"          fullname,",
				"          phone,",
				"          zip,",
				"          SoundexValue",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> soundexBranch",
				"soundexJoin aggregate(groupBy(phone,",
				"          soundexBranch@SoundexValue),",
				"     phonematch = sum(1),",
				"          acctnum_agg = last(acctnum)) ~> groupPhone",
				"soundexJoin select(mapColumn(",
				"          soundexmatch,",
				"          acctnum,",
				"          fullname,",
				"          phone,",
				"          zip,",
				"          SoundexValue = soundexBranch@SoundexValue",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> phoneBranch",
				"groupPhone, phoneBranch join(acctnum_agg == acctnum,",
				"     joinType:'right',",
				"     broadcast: 'auto')~> phoneJoin",
				"phoneJoin aggregate(groupBy(zip,",
				"          phoneBranch@SoundexValue),",
				"     zipcount = sum(1),",
				"          acctnum_agg = last(acctnum_agg)) ~> groupZip",
				"phoneJoin select(mapColumn(",
				"          phonematch,",
				"          soundexmatch,",
				"          acctnum,",
				"          fullname,",
				"          phone = phoneBranch@phone,",
				"          zip,",
				"          SoundexValue = phoneBranch@SoundexValue",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> zipBranch",
				"groupZip, zipBranch join(acctnum_agg == acctnum,",
				"     joinType:'right',",
				"     broadcast: 'auto')~> zipJoin",
				"zipJoin derive(soundexweight = 50,",
				"          zipweight = 25,",
				"          phoneweight = 25,",
				"          soundexbool = iif (soundexmatch > 1, 1, 0),",
				"          zipbool = iif (zipcount > 1, 1, 0),",
				"          phonebool = iif (phonematch > 1, 1, 0)) ~> setConstants",
				"setConstants derive(matchscore = (soundexbool * 50) + (zipbool * 25) + (phonebool * 25)) ~> matchScore",
				"matchScore select(mapColumn(",
				"          phone,",
				"          acctnum,",
				"          fullname,",
				"          zip = zipBranch@zip,",
				"          matchscore",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> finalResult",
				"CreateFullName select(mapColumn(",
				"          phone = {Phone No. },",
				"          zip = Zip,",
				"          fullname,",
				"          acctnum = {Emp ID}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> MapNames",
				"inputName derive(fullname = {First Name} + ' ' + {Last Name}) ~> CreateFullName",
				"finalResult split(matchscore > 50,",
				"     disjoint: false) ~> CheckForDupes@(Duplicates, NotDupe)",
				"CheckForDupes@Duplicates output(mapColumn(",
				"          phone,",
				"          acctnum,",
				"          fullname,",
				"          zip,",
				"          matchscore",
				"     )) ~> outputDupes",
				"CheckForDupes@NotDupe output() ~> outputNoDupes"
			]
		}
	}
}