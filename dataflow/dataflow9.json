{
	"name": "dataflow9",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesD2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "ExternalCall1",
					"linkedService": {
						"referenceName": "RestService5",
						"type": "LinkedServiceReference"
					}
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "DerivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as integer,",
				"          title as string,",
				"          genres as string,",
				"          year as short,",
				"          Rating as short,",
				"          RottenTomato as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"DerivedColumn1 call(mapColumn(",
				"          column1,",
				"          column1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     output(",
				"          headers as [string,string],",
				"          body as (data as (avatar as string, email as string, first_name as string, id as string, last_name as string)[], page as string, per_page as string, support as (text as string, url as string), total as string, total_pages as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     store: 'restservice',",
				"     format: 'rest',",
				"     timeout: 30,",
				"     httpMethod: 'GET',",
				"     rowRelativeUrl: 'column1',",
				"     requestFormat: ['type' -> 'json'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> ExternalCall1",
				"source1 keyGenerate(output(sk as long),",
				"     startAt: 1L) ~> SurrogateKey1",
				"SurrogateKey1 derive(column1 = \"/api/users/{toString(sk)}\") ~> DerivedColumn1",
				"ExternalCall1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}