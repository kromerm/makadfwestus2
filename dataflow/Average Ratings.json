{
	"name": "Average Ratings",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLMovies",
						"type": "DatasetReference"
					},
					"name": "MoviesSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "adlsgen2folder",
						"type": "DatasetReference"
					},
					"name": "OutputToLake"
				}
			],
			"transformations": [
				{
					"name": "SelectColumns"
				},
				{
					"name": "AvgRatingPerYear"
				},
				{
					"name": "FormatRating"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as integer,",
				"          title as string,",
				"          genres as string,",
				"          year as integer,",
				"          Rating as integer,",
				"          RottenTomato as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> MoviesSource",
				"MoviesSource select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          Rating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns aggregate(groupBy(year),",
				"     AvgRatingPerYear = avg(Rating)) ~> AvgRatingPerYear",
				"AvgRatingPerYear derive(AvgRatingPerYear = round(AvgRatingPerYear,2)) ~> FormatRating",
				"FormatRating sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          identifier as string,",
				"          createdOn as string,",
				"          modifiedOn as string,",
				"          originalTimeZoneUTCOffset as string,",
				"          sourceAuthority as string,",
				"          salutation as string,",
				"          firstName as string,",
				"          nickName as string,",
				"          middleName as string,",
				"          lastName as string,",
				"          suffix as string,",
				"          fullName as string,",
				"          birthdayDay as string,",
				"          birthdayMonth as string,",
				"          birthdayYear as string,",
				"          birthDate as string,",
				"          genderCode as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OutputToLake"
			]
		}
	}
}