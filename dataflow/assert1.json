{
	"name": "assert1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Address",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AWCustAddress",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "Assert1"
				},
				{
					"name": "DerivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          AddressID as integer,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          StateProvince as string,",
				"          CountryRegion as string,",
				"          PostalCode as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     partitionColumn: 'AddressID',",
				"     partitionBy('external', 2)) ~> source1",
				"source(output(",
				"          CustomerID as integer,",
				"          AddressID as integer,",
				"          AddressType as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     partitionColumn: 'AddressID',",
				"     partitionBy('external', 2)) ~> source2",
				"source1, source2 assert(expectTrue(CountryRegion == 'United States', false, 'nonUS', null, 'only valid for U.S. addresses'),",
				"     expectExists(source1@AddressID == source2@AddressID, false, 'assertExist', StateProvince == 'Washington', toString(source1@AddressID) + ' already exists in Washington'),",
				"     expectUnique(source1@AddressID, false, 'dupecheck', null, toString(source1@AddressID) + ' is not unqiue')) ~> Assert1",
				"Assert1 derive(AnyError = iif(isError(),'ERROR',''),",
				"          nonUS = hasError('nonUS')) ~> DerivedColumn1",
				"DerivedColumn1 sink(validateSchema: false,",
				"     partitionFileNames:['assert.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'mycontainer',",
				"     assertFailure_folderPath: 'errors',",
				"     ignoreAssertFailedRows: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}