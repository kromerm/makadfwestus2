{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "makadfwestus2"
		},
		"SQLMovies_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLMovies'"
		},
		"Snowflake1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Snowflake1'"
		},
		"tpcds_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'tpcds'"
		},
		"WeatherRest_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().myparam}"
		},
		"dummyRest2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dummy.restapiexample.com/api/v1/create"
		},
		"dummyrest_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dummy.restapiexample.com/api/v1/employees"
		},
		"rest1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://reqres.in/"
		},
		"restdb_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://marktest-4ac2.restdb.io/rest/Weather/"
		},
		"weatheralerts_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.weather.gov/alerts/active"
		},
		"customEventTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/1e42591f-1f0c-4c5a-b7f2-a268f6105ec5/resourceGroups/makadfwestus2/providers/Microsoft.EventGrid/topics/makpipelinecomplete"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SQLMovies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQLMovies_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Snowflake",
				"typeProperties": {
					"authenticationType": "Basic",
					"connectionString": "[parameters('Snowflake1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherRest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"myparam": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('WeatherRest_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummyRest2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('dummyRest2_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummyrest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('dummyrest_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('rest1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/restdb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('restdb_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tpcds')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('tpcds_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/weatheralerts')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('weatheralerts_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/customEventTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "CustomEventsTrigger",
				"typeProperties": {
					"subjectEndsWith": "",
					"subjectBeginsWith": "",
					"scope": "[parameters('customEventTrigger_properties_typeProperties_scope')]",
					"events": [
						"pipelineCompleted"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger2')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 19,
					"startTime": "2021-11-17T04:44:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger31')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2022-03-23T04:47:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowIRwReuse')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 48,
							"timeToLive": 240,
							"cleanup": false,
							"externalComputeInfo": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 80,
							"timeToLive": 240,
							"externalComputeInfo": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/shir1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/smallIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 16,
							"timeToLive": 0,
							"cleanup": true,
							"externalComputeInfo": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DedupeFuzzyFlowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "FuzzyMatch"
						},
						{
							"name": "groupSoundex"
						},
						{
							"name": "Orig1"
						},
						{
							"name": "soundexJoin"
						},
						{
							"name": "soundexBranch"
						},
						{
							"name": "groupPhone"
						},
						{
							"name": "phoneBranch"
						},
						{
							"name": "phoneJoin"
						},
						{
							"name": "groupZip"
						},
						{
							"name": "zipBranch"
						},
						{
							"name": "zipJoin"
						},
						{
							"name": "setConstants"
						},
						{
							"name": "matchScore"
						},
						{
							"name": "finalResult"
						},
						{
							"name": "MapNames"
						},
						{
							"name": "CreateFullName"
						},
						{
							"name": "CheckForDupes"
						},
						{
							"name": "inputName"
						},
						{
							"name": "outputDupes"
						},
						{
							"name": "outputNoDupes"
						}
					],
					"scriptLines": [
						"input(output(",
						"          {Emp ID} as string,",
						"          {Middle Initial} as string,",
						"          {Last Name} as string,",
						"          {Phone No. } as string,",
						"          Zip as string,",
						"          {First Name} as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> inputName",
						"MapNames derive(SoundexValue = soundex(fullname)) ~> FuzzyMatch",
						"Orig1 aggregate(groupBy(SoundexValue),",
						"     soundexmatch = sum(1)) ~> groupSoundex",
						"FuzzyMatch select(mapColumn(",
						"          acctnum,",
						"          fullname,",
						"          phone,",
						"          zip,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> Orig1",
						"groupSoundex, soundexBranch join(groupSoundex@SoundexValue == soundexBranch@SoundexValue,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> soundexJoin",
						"FuzzyMatch select(mapColumn(",
						"          acctnum,",
						"          fullname,",
						"          phone,",
						"          zip,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> soundexBranch",
						"soundexJoin aggregate(groupBy(phone,",
						"          soundexBranch@SoundexValue),",
						"     phonematch = sum(1),",
						"          acctnum_agg = last(acctnum)) ~> groupPhone",
						"soundexJoin select(mapColumn(",
						"          soundexmatch,",
						"          acctnum,",
						"          fullname,",
						"          phone,",
						"          zip,",
						"          SoundexValue = soundexBranch@SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> phoneBranch",
						"groupPhone, phoneBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> phoneJoin",
						"phoneJoin aggregate(groupBy(zip,",
						"          phoneBranch@SoundexValue),",
						"     zipcount = sum(1),",
						"          acctnum_agg = last(acctnum_agg)) ~> groupZip",
						"phoneJoin select(mapColumn(",
						"          phonematch,",
						"          soundexmatch,",
						"          acctnum,",
						"          fullname,",
						"          phone = phoneBranch@phone,",
						"          zip,",
						"          SoundexValue = phoneBranch@SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> zipBranch",
						"groupZip, zipBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> zipJoin",
						"zipJoin derive(soundexweight = 50,",
						"          zipweight = 25,",
						"          phoneweight = 25,",
						"          soundexbool = iif (soundexmatch > 1, 1, 0),",
						"          zipbool = iif (zipcount > 1, 1, 0),",
						"          phonebool = iif (phonematch > 1, 1, 0)) ~> setConstants",
						"setConstants derive(matchscore = (soundexbool * 50) + (zipbool * 25) + (phonebool * 25)) ~> matchScore",
						"matchScore select(mapColumn(",
						"          phone,",
						"          acctnum,",
						"          fullname,",
						"          zip = zipBranch@zip,",
						"          matchscore",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> finalResult",
						"CreateFullName select(mapColumn(",
						"          phone = {Phone No. },",
						"          zip = Zip,",
						"          fullname,",
						"          acctnum = {Emp ID}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> MapNames",
						"inputName derive(fullname = {First Name} + ' ' + {Last Name}) ~> CreateFullName",
						"finalResult split(matchscore > 50,",
						"     disjoint: false) ~> CheckForDupes@(Duplicates, NotDupe)",
						"CheckForDupes@Duplicates output(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> outputDupes",
						"CheckForDupes@NotDupe output() ~> outputNoDupes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DedupeFuzzyFlowlet2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "FuzzyMatch"
						},
						{
							"name": "groupSoundex"
						},
						{
							"name": "Orig1"
						},
						{
							"name": "soundexJoin"
						},
						{
							"name": "soundexBranch"
						},
						{
							"name": "groupPhone"
						},
						{
							"name": "phoneBranch"
						},
						{
							"name": "phoneJoin"
						},
						{
							"name": "groupZip"
						},
						{
							"name": "zipBranch"
						},
						{
							"name": "zipJoin"
						},
						{
							"name": "setConstants"
						},
						{
							"name": "matchScore"
						},
						{
							"name": "finalResult"
						},
						{
							"name": "MapNames"
						},
						{
							"name": "CreateFullName"
						},
						{
							"name": "CheckForDupes"
						},
						{
							"name": "inputName"
						},
						{
							"name": "outputDupes"
						},
						{
							"name": "outputNoDupes"
						}
					],
					"scriptLines": [
						"input(output(",
						"          {Emp ID} as string,",
						"          {First Name} as string,",
						"          {Middle Initial} as string,",
						"          {Last Name} as string,",
						"          {Phone No. } as string,",
						"          Zip as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> inputName",
						"MapNames derive(SoundexValue = soundex(fullname)) ~> FuzzyMatch",
						"Orig1 aggregate(groupBy(SoundexValue),",
						"     soundexmatch = sum(1)) ~> groupSoundex",
						"FuzzyMatch select(mapColumn(",
						"          acctnum,",
						"          fullname,",
						"          phone,",
						"          zip,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> Orig1",
						"groupSoundex, soundexBranch join(groupSoundex@SoundexValue == soundexBranch@SoundexValue,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> soundexJoin",
						"FuzzyMatch select(mapColumn(",
						"          acctnum,",
						"          fullname,",
						"          phone,",
						"          zip,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> soundexBranch",
						"soundexJoin aggregate(groupBy(phone,",
						"          soundexBranch@SoundexValue),",
						"     phonematch = sum(1),",
						"          acctnum_agg = last(acctnum)) ~> groupPhone",
						"soundexJoin select(mapColumn(",
						"          soundexmatch,",
						"          acctnum,",
						"          fullname,",
						"          phone,",
						"          zip,",
						"          SoundexValue = soundexBranch@SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> phoneBranch",
						"groupPhone, phoneBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> phoneJoin",
						"phoneJoin aggregate(groupBy(zip,",
						"          phoneBranch@SoundexValue),",
						"     zipcount = sum(1),",
						"          acctnum_agg = last(acctnum_agg)) ~> groupZip",
						"phoneJoin select(mapColumn(",
						"          phonematch,",
						"          soundexmatch,",
						"          acctnum,",
						"          fullname,",
						"          phone = phoneBranch@phone,",
						"          zip,",
						"          SoundexValue = phoneBranch@SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> zipBranch",
						"groupZip, zipBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> zipJoin",
						"zipJoin derive(soundexweight = 50,",
						"          zipweight = 25,",
						"          phoneweight = 25,",
						"          soundexbool = iif (soundexmatch > 1, 1, 0),",
						"          zipbool = iif (zipcount > 1, 1, 0),",
						"          phonebool = iif (phonematch > 1, 1, 0)) ~> setConstants",
						"setConstants derive(matchscore = (soundexbool * 50) + (zipbool * 25) + (phonebool * 25)) ~> matchScore",
						"matchScore select(mapColumn(",
						"          phone,",
						"          acctnum,",
						"          fullname,",
						"          zip = zipBranch@zip,",
						"          matchscore",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> finalResult",
						"CreateFullName select(mapColumn(",
						"          phone = {Phone No. },",
						"          zip = Zip,",
						"          fullname,",
						"          acctnum = {Emp ID}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> MapNames",
						"inputName derive(fullname = {First Name} + ' ' + {Last Name}) ~> CreateFullName",
						"finalResult split(matchscore > 50,",
						"     disjoint: false) ~> CheckForDupes@(Duplicates, NotDupe)",
						"CheckForDupes@Duplicates output(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> outputDupes",
						"CheckForDupes@NotDupe output() ~> outputNoDupes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MarksFuncs')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "These are my custom functions",
				"type": "UDFLibrary",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [],
					"scriptLines": [
						"isProfitable(integer, integer) as boolean = ((i1 - i2) / i1) > .50,",
						"toEpoch(timestamp) as long = toLong( i1-toTimestamp('1970-01-01 00:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')) /1000l"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataDedupeFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "FuzzyMatch"
						},
						{
							"name": "groupSoundex"
						},
						{
							"name": "Orig1"
						},
						{
							"name": "soundexJoin"
						},
						{
							"name": "soundexBranch"
						},
						{
							"name": "groupPhone"
						},
						{
							"name": "phoneBranch"
						},
						{
							"name": "phoneJoin"
						},
						{
							"name": "groupZip"
						},
						{
							"name": "zipBranch"
						},
						{
							"name": "zipJoin"
						},
						{
							"name": "setConstants"
						},
						{
							"name": "matchScore"
						},
						{
							"name": "finalResult"
						},
						{
							"name": "MapNames"
						},
						{
							"name": "CreateFullName"
						},
						{
							"name": "CheckForDupes"
						},
						{
							"name": "inputName"
						},
						{
							"name": "outputDupes"
						},
						{
							"name": "outputNoDupes"
						}
					],
					"scriptLines": [
						"input(output(",
						"          {Emp ID} as string,",
						"          {Name Prefix} as string,",
						"          {First Name} as string,",
						"          {Middle Initial} as string,",
						"          {Last Name} as string,",
						"          Gender as string,",
						"          {E Mail} as string,",
						"          {Father's Name} as string,",
						"          {Mother's Name} as string,",
						"          {Mother's Maiden Name} as string,",
						"          {Date of Birth} as string,",
						"          {Time of Birth} as string,",
						"          {Age in Yrs.} as double '##.##',",
						"          {Weight in Kgs.} as string,",
						"          {Date of Joining} as string,",
						"          {Quarter of Joining} as string,",
						"          {Half of Joining} as string,",
						"          {Year of Joining} as string,",
						"          {Month of Joining} as string,",
						"          {Month Name of Joining} as string,",
						"          {Short Month} as string,",
						"          {Day of Joining} as string,",
						"          {DOW of Joining} as string,",
						"          {Short DOW} as string,",
						"          {Age in Company (Years)} as string,",
						"          Salary as integer,",
						"          {Last % Hike} as string,",
						"          SSN as string,",
						"          {Phone No. } as string,",
						"          {Place Name} as string,",
						"          County as string,",
						"          City as string,",
						"          State as string,",
						"          Zip as string,",
						"          Region as string,",
						"          {User Name} as string,",
						"          Password as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> inputName",
						"MapNames derive(SoundexValue = soundex(fullname)) ~> FuzzyMatch",
						"Orig1 aggregate(groupBy(SoundexValue),",
						"     soundexmatch = sum(1)) ~> groupSoundex",
						"FuzzyMatch select(mapColumn(",
						"          acctnum,",
						"          fullname,",
						"          phone,",
						"          zip,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> Orig1",
						"groupSoundex, soundexBranch join(groupSoundex@SoundexValue == soundexBranch@SoundexValue,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> soundexJoin",
						"FuzzyMatch select(mapColumn(",
						"          acctnum,",
						"          fullname,",
						"          phone,",
						"          zip,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> soundexBranch",
						"soundexJoin aggregate(groupBy(phone,",
						"          soundexBranch@SoundexValue),",
						"     phonematch = sum(1),",
						"          acctnum_agg = last(acctnum)) ~> groupPhone",
						"soundexJoin select(mapColumn(",
						"          soundexmatch,",
						"          acctnum,",
						"          fullname,",
						"          phone,",
						"          zip,",
						"          SoundexValue = soundexBranch@SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> phoneBranch",
						"groupPhone, phoneBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> phoneJoin",
						"phoneJoin aggregate(groupBy(zip,",
						"          phoneBranch@SoundexValue),",
						"     zipcount = sum(1),",
						"          acctnum_agg = last(acctnum_agg)) ~> groupZip",
						"phoneJoin select(mapColumn(",
						"          phonematch,",
						"          soundexmatch,",
						"          acctnum,",
						"          fullname,",
						"          phone = phoneBranch@phone,",
						"          zip,",
						"          SoundexValue = phoneBranch@SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> zipBranch",
						"groupZip, zipBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> zipJoin",
						"zipJoin derive(soundexweight = 50,",
						"          zipweight = 25,",
						"          phoneweight = 25,",
						"          soundexbool = iif (soundexmatch > 1, 1, 0),",
						"          zipbool = iif (zipcount > 1, 1, 0),",
						"          phonebool = iif (phonematch > 1, 1, 0)) ~> setConstants",
						"setConstants derive(matchscore = (soundexbool * 50) + (zipbool * 25) + (phonebool * 25)) ~> matchScore",
						"matchScore select(mapColumn(",
						"          phone,",
						"          acctnum,",
						"          fullname,",
						"          zip = zipBranch@zip,",
						"          matchscore",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> finalResult",
						"CreateFullName select(mapColumn(",
						"          phone = {Phone No. },",
						"          zip = Zip,",
						"          fullname,",
						"          acctnum = {Emp ID}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> MapNames",
						"inputName derive(fullname = {First Name} + ' ' + {Last Name}) ~> CreateFullName",
						"finalResult split(matchscore > 50,",
						"     disjoint: false) ~> CheckForDupes@(Duplicates, NotDupe)",
						"CheckForDupes@Duplicates output(mapColumn(",
						"          phone,",
						"          acctnum,",
						"          fullname,",
						"          zip,",
						"          matchscore",
						"     )) ~> outputDupes",
						"CheckForDupes@NotDupe output() ~> outputNoDupes"
					]
				}
			},
			"dependsOn": []
		}
	]
}