{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "makadfwestus2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MovieDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Calculating average movie rating by genre and year using Power Query",
				"activities": [
					{
						"name": "AverageMovieRating",
						"description": "Calculating average movie rating by genre and year",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MovieDemo",
								"type": "DataFlowReference",
								"datasetParameters": {
									"MovieData": {},
									"MovieSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "MovieSink",
											"dataset": {
												"referenceName": "MovieSink",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> MovieSink"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MovieDemo"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Moving Average')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Moving average example using Microsoft stock prices from Quandl CSV data:\n\nhttps://www.quandl.com/data/EOD/MSFT-Microsoft-Corporation-MSFT-Stock-Prices-Dividends-and-Splits",
				"activities": [
					{
						"name": "Moving Average",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Moving Average",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StocksSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "dataflowIRwReuse",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Partition Output by Size')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sample pipeline that uses data flow to partition output based on incoming source file size",
				"activities": [
					{
						"name": "parts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "partBySize",
								"type": "DataFlowReference",
								"parameters": {
									"filesize": {
										"value": "@activity('Get Metadata1').output.size",
										"type": "Expression"
									},
									"targetsize": "5000000"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"runConcurrently": true
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "loans",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process Dimensions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "Iterate over files",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get files').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Clean and Prep",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "dataflow2",
											"type": "DataFlowReference",
											"parameters": {
												"parameter1": {
													"value": "@item().name",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "SCD Type2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Iterate over files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Moving Average",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StocksSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Send email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SCD Type2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.yahoo.com",
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Send to Teams",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SCD Type2",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.yahoo.com",
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Get files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "genericfolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "dbo.MainControlTable_9rl"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_9rl_20210818"
				},
				"annotations": [
					"MetadataDrivenSolution"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLCDC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Native SQL CDC",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continuationSettings": {
								"customizedCheckpointKey": "e43bf76e-529c-47e1-b84e-f2fb903221c9"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"abc": {
						"type": "String"
					},
					"vvbfb": {
						"type": "String"
					},
					"dsfdsfds": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cacheOutput')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WeatherRestAPI",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "weatherJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "WeatherStats",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "WeatherRestAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "restdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"WeatherRestSource": {},
									"source1": {},
									"TextFileOut": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "dataflowIRwReuse",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Set Avg Temp",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WeatherStats",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "avgTemp",
							"value": {
								"value": "@string(activity('WeatherStats').output.runStatus.output.sink1.value[0].avgTemp)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Max Wind",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Avg Temp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "maxWind",
							"value": {
								"value": "@string(activity('WeatherStats').output.runStatus.output.sink1.value[0].maxWind)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"avgTemp": {
						"type": "String"
					},
					"maxWind": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": 32,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "member_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "member_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "loan_amnt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "loan_amnt",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "funded_amnt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "funded_amnt",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "funded_amnt_inv",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "funded_amnt_inv",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "term",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "term",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "int_rate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "int_rate",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "installment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "installment",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "grade",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "grade",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sub_grade",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "sub_grade",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "emp_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "emp_title",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "emp_length",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "emp_length",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "home_ownership",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "home_ownership",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "annual_inc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "annual_inc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "verification_status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "verification_status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "issue_d",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "issue_d",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "loan_status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "loan_status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "pymnt_plan",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "pymnt_plan",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "url",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "url",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "desc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "desc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "purpose",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "purpose",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "zip_code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "zip_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "addr_state",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "addr_state",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "dti",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dti",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "delinq_2yrs",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "delinq_2yrs",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "earliest_cr_line",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "earliest_cr_line",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "inq_last_6mths",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "inq_last_6mths",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "mths_since_last_delinq",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "mths_since_last_delinq",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "mths_since_last_record",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "mths_since_last_record",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "open_acc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "open_acc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "pub_rec",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "pub_rec",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "revol_bal",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revol_bal",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "revol_util",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revol_util",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_acc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_acc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "initial_list_status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "initial_list_status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "out_prncp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "out_prncp",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "out_prncp_inv",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "out_prncp_inv",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_pymnt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_pymnt",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_pymnt_inv",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_pymnt_inv",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_rec_prncp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_rec_prncp",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_rec_int",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_rec_int",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_rec_late_fee",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_rec_late_fee",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "recoveries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "recoveries",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "collection_recovery_fee",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "collection_recovery_fee",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "last_pymnt_d",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "last_pymnt_d",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "last_pymnt_amnt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "last_pymnt_amnt",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "next_pymnt_d",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "next_pymnt_d",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "last_credit_pull_d",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "last_credit_pull_d",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "collections_12_mths_ex_med",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "collections_12_mths_ex_med",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "mths_since_last_major_derog",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "mths_since_last_major_derog",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "policy_code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "policy_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "application_type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "application_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "annual_inc_joint",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "annual_inc_joint",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "dti_joint",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dti_joint",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "verification_status_joint",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "verification_status_joint",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "acc_now_delinq",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "acc_now_delinq",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "tot_coll_amt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tot_coll_amt",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "tot_cur_bal",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tot_cur_bal",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "open_acc_6m",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "open_acc_6m",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "open_il_6m",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "open_il_6m",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "open_il_12m",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "open_il_12m",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "open_il_24m",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "open_il_24m",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "mths_since_rcnt_il",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "mths_since_rcnt_il",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_bal_il",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_bal_il",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "il_util",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "il_util",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "open_rv_12m",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "open_rv_12m",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "open_rv_24m",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "open_rv_24m",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "max_bal_bc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "max_bal_bc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "all_util",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "all_util",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_rev_hi_lim",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_rev_hi_lim",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "inq_fi",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "inq_fi",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_cu_tl",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "total_cu_tl",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "inq_last_12m",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "inq_last_12m",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTableLoansNews",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet1Folder",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CDM",
								"type": "DataFlowReference",
								"parameters": {
									"rootfolder": "'mycontainer'",
									"cdmfolder": "'cdmfolder'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "dataflowIRwReuse",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dedupePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline contains 2 data flows that help with data deduplication. The first data flow will return only distinct rows while the second data flow will product 2 output files based on matched rows and unique rows.",
				"activities": [
					{
						"name": "Deduplication Matching",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataDedupe",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceName": {},
									"sinkDupes": {},
									"sinkNoDupes": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DistinctRows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DistinctRows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dqpipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DQ Rules",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataQuality1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"loansSource": {},
									"rules1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/driftpipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "driftflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "driftflow-1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookupPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select id, member_id, loan_amnt, funded_amnt, term, int_rate,emp_title,\nemp_length, home_ownership, annual_inc, url, purpose, title from loanstest",
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadUncommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "www.yahoo.com",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('Lookup1').output",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/partition data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "movieparts",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "movieparts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"taxiSource": {},
									"movieSource": {},
									"loans": {},
									"taxiSink": {},
									"movieSink": {},
									"loansSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "partdata",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "partdata",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "updateMovieParts",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "updateMovieParts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"movies": {},
									"taxiSource": {},
									"sink1": {},
									"taxiSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "sampling",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pqpipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TaxiPQ",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "mytaxidemo",
								"type": "DataFlowReference",
								"datasetParameters": {
									"taxi_fare_data_input1": {},
									"taxi_trip_data_input1": {},
									"Sinkfolderout": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "dataflowIRwReuse",
								"type": "IntegrationRuntimeReference"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "Sinkfolderout",
											"dataset": {
												"referenceName": "folderout",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['taxiout.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Sinkfolderout"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/restpipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "restdataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "restdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"WeatherRestSource": {},
									"source1": {},
									"TextFileOut": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkIfMoreThanNRows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sinkIfMoreThanNRows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "sinkIfMoreThanNRows",
								"type": "DataFlowReference",
								"parameters": {
									"parameter1": "0"
								},
								"datasetParameters": {
									"moviesSource": {},
									"rowcountSource": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxipipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "taxiDemo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "taxiDemo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"taxiSource": {},
									"tripSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "dataflowIRwReuse",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "updateTaxi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "taxiDemo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "updateTaxi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "dataflowIRwReuse",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wranglingpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loans Data Prep",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [
							{
								"activity": "Acquire Loans Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoansDataWrangling",
								"type": "DataFlowReference",
								"datasetParameters": {
									"loans": {},
									"Sinkfolderout": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1",
								"type": "IntegrationRuntimeReference"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "Sinkfolderout",
											"dataset": {
												"referenceName": "folderout",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Sinkfolderout"
										}
									]
								}
							]
						}
					},
					{
						"name": "Acquire Loans Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTableLoans",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "folderout",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AWDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AWCustAddress",
								"type": "DatasetReference"
							},
							"name": "CustAddress"
						},
						{
							"dataset": {
								"referenceName": "AWCustomers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "AWAddress"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sourceQuery"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "JoinCustomerBridge"
						},
						{
							"name": "JoinAddress"
						},
						{
							"name": "RowCount1"
						},
						{
							"name": "RowCount2"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "WhereFilter"
						},
						{
							"name": "RowCount3"
						}
					],
					"script": "parameters{\n\tCustomerID as integer (29485)\n}\nsource(output(\n\t\tCustomerID as integer,\n\t\tAddressID as integer,\n\t\tAddressType as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustAddress\nsource(output(\n\t\tCustomerID as integer,\n\t\tNameStyle as boolean,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tSuffix as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tPasswordHash as string,\n\t\tPasswordSalt as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Customers\nsource(output(\n\t\tAddressID as integer,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AWAddress\nsource(output(\n\t\tCustomerID as integer,\n\t\tNameStyle as boolean,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: '   SELECT\\n   \t\ta.CustomerID,\\n\t\tNameStyle,\\n\t\tTitle,\\n\t\tFirstName,\\n\t\tLastName,\\n\t\tCompanyName,\\n\t\tSalesPerson,\\n\t\tEmailAddress,\\n\t\tPhone,\\n\t\tAddressLine1,\\n\t\tAddressLine2,\\n\t\tCity,\\n\t\tStateProvince,\\n\t\tCountryRegion,\\n\t\tPostalCode\\n   FROM SalesLT.Customer a  \\n   INNER JOIN SalesLT.CustomerAddress b ON a.CustomerID = b.CustomerID\\n   INNER JOIN SalesLT.Address c ON b.AddressID = c.AddressID\\n   WHERE StateProvince = \\'Washington\\' or StateProvince = \\'Pennsylvania\\'',\n\tformat: 'query') ~> sourceQuery\nCustomers, CustAddress join(Customers@CustomerID == CustAddress@CustomerID,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinCustomerBridge\nJoinCustomerBridge, AWAddress join(CustAddress@AddressID == AWAddress@AddressID,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinAddress\nCustomers aggregate(rowcount = count()) ~> RowCount1\nJoinAddress aggregate(rowcount = count()) ~> RowCount2\nJoinAddress select(mapColumn(\n\t\tCustomerID = Customers@CustomerID,\n\t\tNameStyle,\n\t\tTitle,\n\t\tFirstName,\n\t\tLastName,\n\t\tCompanyName,\n\t\tSalesPerson,\n\t\tEmailAddress,\n\t\tPhone,\n\t\tAddressLine1,\n\t\tAddressLine2,\n\t\tCity,\n\t\tStateProvince,\n\t\tCountryRegion,\n\t\tPostalCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nSelectColumns filter(CustomerID == $CustomerID) ~> WhereFilter\nWhereFilter aggregate(rowcount = count()) ~> RowCount3\nWhereFilter sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0) ~> sink1\nsourceQuery sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Address Quality')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "Address1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "OutputToADLS",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "DataQualityRules"
						},
						{
							"name": "MetadataChecker"
						},
						{
							"name": "FailedMetadata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Address1",
						"MetadataChecker@Pass assert(expectTrue(CountryRegion == 'United States', false, 'assertUsOnly', null, CountryRegion + ' is not valid'),",
						"     expectUnique(AddressID, false, 'addressIdUnique', null, \"ID of {AddressID} is not unique\")) ~> DataQualityRules",
						"Address1 split(iif(!in(columnNames(),'AddressID'),false(),\r",
						"    iif(!in(columnNames(),'AddressLine1'),false(),\r",
						"        iif(!in(columnNames(),'City'),false(),\r",
						"            iif(!in(columnNames(),'StateProvince'),false(),\r",
						"                iif(!in(columnNames(),'CountryRegion'),false(),\r",
						"                    iif(!in(columnNames(),'PostalCode'),false(),true())))))),",
						"     disjoint: false) ~> MetadataChecker@(Pass, Fail)",
						"MetadataChecker@Fail assert(expectTrue(false(), false, 'failedMetadata', null, 'Not all columns present'),",
						"     abort: true) ~> FailedMetadata",
						"DataQualityRules sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     preCommands: [],",
						"     postCommands: []) ~> OutputToADLS"
					]
				}
			},
			"dependsOn": []
		}
	]
}